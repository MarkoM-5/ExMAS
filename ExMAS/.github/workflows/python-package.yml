# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# name: Python package

# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

# jobs:
#   build:

#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: [3.7, 3.8]

#     steps:
#     - uses: actions/checkout@v2
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v2
#       with:
#         python-version: ${{ matrix.python-version }}
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install flake8 pytest
#         pip install -r ExMAS/requirements.txt
#         wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;    
#         bash miniconda.sh -b -p $HOME/miniconda
#         source "$HOME/miniconda/etc/profile.d/conda.sh"
#         hash -r
#         conda config --set always_yes yes --set changeps1 no
#         conda update -q conda
#         conda info -a
#         conda config --prepend channels conda-forge
#         conda create -n ox --strict-channel-priority osmnx
#         conda activate ox
#         pip install -r ExMAS/requirements.txt
#         pip install coveralls
#     - name: Lint with flake8
#       run: |
#         # stop the build if there are Python syntax errors or undefined names
#         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#     - name: Test with pytest
#       run: |
#         pip install pytest
#         pip install pytest-cov
#         pip install coveralls
#         conda activate ox
#         coverage run -m unittest tests/ExMAS_test.py
#         pip install setuptools wheel twine
#     - name: Build and publish
#       env:
#         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#       run: |
#         python setup.py sdist bdist_wheel
#         twine upload dist/*
